# src/your_proj/experiments/base.py
from abc import ABC, abstractmethod
from typing import Any, Callable, Dict, Tuple
from transformers import PreTrainedTokenizerBase, PreTrainedModel

class Experiment(ABC):
    @abstractmethod
    def load_model_and_tok(self, cfg) -> Tuple[PreTrainedModel, PreTrainedTokenizerBase]: ...
    @abstractmethod
    def load_datasets(self) -> Tuple[Any, Any]: ...
    @abstractmethod
    def preprocessing_fn(self, tok: PreTrainedTokenizerBase, model: PreTrainedModel) -> Callable: ...
    @abstractmethod
    def get_collator(self, tok: PreTrainedTokenizerBase) -> Callable: ...
    @abstractmethod
    def compute_metrics(self, tok: PreTrainedTokenizerBase, cfg) -> Callable: ...
    @abstractmethod
    def get_trainer_class(self) -> Any: ...